Decison Tree Algorithm

params = {"max_depth" : [1, 5, 10, 50, 100, 500, 100],
 "random_state" : [100],
 "max_leaf_nodes" : [10,50,100,200],
 "criterion" : ['gini', 'entropy'],
 "max_features" : ['auto']}
 
 clf_dt = DecisionTreeClassifier(criterion='gini',max_depth=500,max_leaf_nodes=200,random_state=100)
clf_dt = clf_dt.fit(x_train,y_train)

XGBoost Algorithm

params = {"max_depth" : [2, 3, 4, 5],
 "random_state" : [100],
 "n_estimators" : [5, 10, 50, 100, 200],
 "criterion" : ['gini', 'entropy'],
 "max_features" : ['auto']}
 
 clf_xgb = xgb.XGBClassifier(max_depth=2, n_estimators=5,criterion='gini',random_state=100,verbose=50,n_jobs=-1)
clf_xgb.fit(x_train,y_train)

Random Forest Classifier

param = {'n_estimators':[5, 10, 50, 100, 200, 500, 1000],
 'max_depth' : [2, 3, 4, 5, 6, 7, 8, 9, 10], 
 'criterion' : ['gini','entropy'],
 'random_state' : [100],
 'n_jobs' : [-1]}
 
 clf_rf = RandomForestClassifier(criterion='entropy',max_depth=7,n_estimators=5,random_state=100,n_jobs=-1)
clf_rf = clf_rf.fit(x_train,y_train)

Light GBM ( Light Gradient Boosting Machine)

param = {'objective' : ['multiclass'],
 'boosting_type' : ['gbdt'],
 'learning_rate': [0.05,0.1],
 'num_leaves': [10,50,100],
 'bagging_fraction' : [0.7],
 'feature_fraction' : [0.7],
 'bagging_seed' : [420],
 'max_depth' : [2,5,7],
 'metric' : ['multi_logloss'],
 'num_class':[4]}
 
 model_lgb = lgb.train(params, lgbtrain, 1000, valid_sets=[lgbtest], early_stopping_rounds=50, verbose_eval=100)
 
 ADABOOST Algorithm
 
 clf_ada = AdaBoostClassifier(random_state=100)
clf_ada = clf_ada.fit(x_train,y_train)
